{"version":3,"sources":["components/Button/Button.tsx","components/ButtonBox/ButtonBox.tsx","components/Screen/Screen.tsx","components/Wrapper/Wrapper.tsx","App.tsx","index.tsx"],"names":["Button","handleClick","symbol","className","onClick","type","ButtonBox","map","row","smbl","Screen","expression","addExpression","numbers","operands","Wrapper","useState","textToShow","setTextToShow","upperTextToShow","setUpperTextToShow","clearScreen","useCallback","Number","isInteger","prev","toString","push","includes","length","pop","arr","split","splice","join","result","i","parseFloat","toFixed","calculate","App","render","document","getElementById"],"mappings":"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","file":"static/js/main.c2c2afe6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Button.css';\r\n\r\ninterface Props {\r\n  handleClick: (symbol: number | string) => void,\r\n  symbol: number | string\r\n}\r\n\r\nconst Button: React.FC<Props> = ({ handleClick, symbol }): JSX.Element =>\r\n  <button\r\n    className={`button${symbol === '=' ? ' equal' : ''}`}\r\n    onClick={() => handleClick(symbol)}\r\n    type=\"button\">\r\n      {symbol}\r\n  </button>\r\n\r\nexport default Button;","import React from 'react';\r\n\r\nimport Button from \"../Button/Button\";\r\nimport './ButtonBox.css';\r\n\r\ninterface Props {\r\n  handleClick: (symbol: number | string) => void\r\n}\r\n\r\nconst ButtonBox: React.FC<Props> = ({ handleClick }): JSX.Element => {\r\n  const buttonSymbols = [\r\n    [\"C\", \"CE\", \"%\", \"/\"],\r\n    [7, 8, 9, \"X\"],\r\n    [4, 5, 6, \"-\"],\r\n    [1, 2, 3, \"+\"],\r\n    [0, \".\", \"=\"],\r\n  ]\r\n\r\n  return (\r\n    <div className=\"button-box\">\r\n      {buttonSymbols.map((row) => (\r\n        row.map((smbl: string | number) => <Button handleClick={handleClick} key={smbl} symbol={smbl}/>)\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ButtonBox;","import React from 'react';\r\n\r\nimport './Screen.css';\r\n\r\ninterface Props {\r\n  expression: string | number,\r\n  addExpression: string\r\n}\r\n\r\nconst Screen: React.FC<Props> = ({ expression, addExpression }): JSX.Element =>\r\n  <div className=\"screen\">\r\n    <span className=\"screen-add\">{addExpression}</span>\r\n    {expression}\r\n  </div>\r\n\r\nexport default Screen;","import React, {useCallback, useState} from 'react';\r\n\r\nimport './Wrapper.css';\r\nimport ButtonBox from \"../ButtonBox/ButtonBox\";\r\nimport Screen from \"../Screen/Screen\";\r\n\r\nlet numbers: Array<string> = [];\r\nlet operands: Array<string> = [];\r\n\r\nconst Wrapper = (): JSX.Element => {\r\n  const [textToShow, setTextToShow] = useState<string>('');\r\n  const [upperTextToShow, setUpperTextToShow] = useState<string>('');\r\n\r\n  function clearScreen() {\r\n    numbers = [];\r\n    operands = [];\r\n  }\r\n\r\n  function calculate(): any {\r\n    let result = Number(numbers[0]);\r\n    for (let i = 0; i < operands.length; i += 1) {\r\n      switch (operands[i]) {\r\n        case '%':\r\n          result %= Number(numbers[i + 1]);\r\n          break;\r\n        case '/':\r\n          result /= Number(numbers[i + 1]);\r\n          break;\r\n        case 'X':\r\n          result *= Number(numbers[i + 1]);\r\n          break;\r\n        case '-':\r\n          result -= Number(numbers[i + 1]);\r\n          break;\r\n        case '+':\r\n          result += Number(numbers[i + 1]);\r\n          break;\r\n        default:\r\n          result = 0;\r\n      }\r\n    }\r\n    return parseFloat(result.toFixed(3));\r\n  }\r\n\r\n  const handleClick = useCallback((symbol: number | string): void => {\r\n    if (Number.isInteger(symbol) || symbol === '.') {\r\n      setTextToShow(prev => prev + symbol.toString());\r\n    } else if (!Number.isInteger(symbol) && symbol.toString() !== \"CE\") {\r\n      if (symbol.toString() !== '=') {\r\n        if (textToShow) {\r\n          numbers.push(textToShow);\r\n          operands.push(symbol.toString());\r\n          setUpperTextToShow(prev => `${prev + textToShow} ${symbol.toString()} `);\r\n        }\r\n        if (upperTextToShow.includes('=')) {\r\n          setUpperTextToShow(`${textToShow} ${symbol.toString()} `);\r\n        }\r\n        setTextToShow('');\r\n      } else {\r\n        if (textToShow) numbers.push(textToShow);\r\n        // Calculate only if number array contains more than 2 numbers\r\n        if (numbers.length >= 2 && !upperTextToShow.includes('=')) {\r\n          if (operands.length >= numbers.length) {\r\n            // Replace last operand from upper text to equal sign\r\n            operands.pop();\r\n            setUpperTextToShow(prev => {\r\n              const arr = prev.split('');\r\n              arr.splice(-2).join('')\r\n              return `${arr.join('')} = `;\r\n            });\r\n          } else {\r\n            setUpperTextToShow(prev => `${prev + textToShow} ${symbol.toString()} `)\r\n          }\r\n          setTextToShow(calculate().toString());\r\n          clearScreen();\r\n        }\r\n      }\r\n    }\r\n    if (symbol === 'C') {\r\n      clearScreen();\r\n      setUpperTextToShow('');\r\n    }\r\n    if (symbol === 'CE') {\r\n      if (numbers.length === 0) {\r\n        setUpperTextToShow('');\r\n        setTextToShow('');\r\n      }\r\n      setTextToShow('');\r\n    }\r\n  }, [textToShow, upperTextToShow]);\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <Screen addExpression={upperTextToShow} expression={textToShow} />\r\n      <ButtonBox handleClick={handleClick}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Wrapper;","import './App.css';\r\nimport Wrapper from \"./components/Wrapper/Wrapper\";\r\n\r\nconst App = (): JSX.Element => (\r\n  <div className=\"App\">\r\n    <Wrapper />\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import { StrictMode } from 'react';\r\nimport { render } from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nrender(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}